# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateItemInput {
  description: String!
  name: String!
}

input CreateMessageInput {
  content: String!
  receiverId: String!
  senderId: String!
}

input CreateUserInput {
  address: String
  email: String!
  name: String!
  password: String!
  phone: String!
  postalCode: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteResponse {
  message: String!
  success: Boolean!
}

type FileUploadResponse {
  message: String
  path: String
  success: Boolean!
  url: String
}

type Image {
  createdAt: DateTime!
  id: ID!
  item: Item!
  updatedAt: DateTime!
  url: String!
}

type Item {
  createdAt: DateTime!
  description: String!
  id: ID!
  images: [Image!]
  isRented: Boolean!
  name: String!
  rentals: [Rental!]
  updatedAt: DateTime!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

"""Represents a single message between two users"""
type Message {
  content: String!
  id: ID!
  receiver: User!
  sender: User!
  timestamp: DateTime!
}

type Mutation {
  addImages(files: [Upload!]!, itemId: String!): [Image!]!
  createItem(createItemInput: CreateItemInput!): Item!
  createMessage(createMessageInput: CreateMessageInput!): Message!

  """Permanently deletes a user by ID."""
  hardDeleteUser(
    """The unique identifier of the user to be permanently deleted."""
    id: ID!
  ): DeleteResponse!

  """Registers a new user in the system."""
  registerUser(
    """Data for the new user."""
    createUserInput: CreateUserInput!
  ): User!
  removeItem(id: ID!): Item!

  """Restores a soft-deleted user by ID."""
  restoreUser(
    """The unique identifier of the user to be restored."""
    id: ID!
  ): DeleteResponse!

  """Performs a soft delete on a user by ID."""
  softDeleteUser(
    """The unique identifier of the user to be soft deleted."""
    id: ID!
  ): DeleteResponse!
  updateItem(id: ID!, updateItemInput: UpdateItemInput!): Item!

  """Updates an existing user's information."""
  updateUser(
    """Data for updating the user."""
    updateUserInput: UpdateUserInput!
  ): User!
  uploadFile(file: Upload!): FileUploadResponse!
  uploadFiles(files: [Upload!]!): [FileUploadResponse!]!
}

type Query {
  item(id: ID!): Item!
  items: [Item!]!

  """Validates user credentials and returns the user if valid."""
  login(
    """User login credentials."""
    loginUserInput: LoginUserInput!
  ): User!
  messagesByUser(limit: Int = 15, page: Int = 1, receiverId: ID, userId: ID!): [Message!]!

  """Finds a single user by ID or email."""
  user(
    """The email address of the user."""
    email: String

    """The unique identifier of the user."""
    id: ID
  ): User
}

type Rental {
  createdAt: DateTime!
  endDate: DateTime!
  id: ID!
  item: Item!
  startDate: DateTime!
  user: User!
}

input UpdateItemInput {
  description: String
  isRented: Boolean
  name: String
}

input UpdateUserInput {
  address: String
  email: String
  id: ID!
  name: String
  password: String
  phone: String
  postalCode: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  address: String
  createdAt: DateTime!
  email: String!
  id: ID!
  items: [Item!]
  name: String!
  phone: String!
  postalCode: String
  rentals: [Rental!]
  updatedAt: DateTime!
}